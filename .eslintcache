[{"/Users/chase.wu/Documents/project/react-app/src/utils.js":"1","/Users/chase.wu/Documents/project/react-app/src/index.js":"2","/Users/chase.wu/Documents/project/react-app/src/pages/ChartA.js":"3","/Users/chase.wu/Documents/project/react-app/src/App.js":"4","/Users/chase.wu/Documents/project/react-app/src/pages/ChartC.js":"5","/Users/chase.wu/Documents/project/react-app/src/pages/ChartB.js":"6"},{"size":918,"mtime":1635841567251,"results":"7","hashOfConfig":"8"},{"size":220,"mtime":1635841567248,"results":"9","hashOfConfig":"8"},{"size":2300,"mtime":1635841650605,"results":"10","hashOfConfig":"8"},{"size":1696,"mtime":1635842613565,"results":"11","hashOfConfig":"8"},{"size":1819,"mtime":1635841643045,"results":"12","hashOfConfig":"8"},{"size":1692,"mtime":1635841662027,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"16gpnql",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chase.wu/Documents/project/react-app/src/utils.js",["30"],"// 处理获得X轴数据\nconst handleXData = (YdataArr, filterLen) => {\n    let newYdata = [...YdataArr]\n    const originLen = YdataArr.length\n    const START = 80e6\n    const END = 108e6\n    let step = 25e3\n\n    if (filterLen && (filterLen < originLen)) {\n        const splitNum = Math.ceil(originLen / filterLen * 2)\n        const newArr = []\n\n        for (let i = 0; i < filterLen; i += 1) {\n            const end = (i + 1) * splitNum\n            const start = i * splitNum\n            const splitArr = newYdata.slice(start, end)\n            if (splitArr.length === 0) {\n                break\n            }\n            newArr.push(Math.max(...splitArr))\n            newArr.push(Math.min(...splitArr))\n        }\n\n        newYdata = newArr\n        step = step * originLen / filterLen\n    }\n\n    return [\n        newYdata.map((_, index) => START + (step * index)),\n        newYdata\n    ]\n}\n\nexport {\n    handleXData\n}","/Users/chase.wu/Documents/project/react-app/src/index.js",[],["31","32"],"/Users/chase.wu/Documents/project/react-app/src/pages/ChartA.js",["33"],"import React, { useState, useEffect, useMemo, useRef } from 'react'\nimport ReactECharts from 'echarts-for-react'\n\nimport { handleXData } from '../utils'\n\nconst OPTION = {\n    title: { text: '11W个点折线图', right: 0 },\n    grid: {\n        top: 8, right: 8, bottom: 80, left: 36\n    },\n    animation: false,\n    xAxis: {\n        type: 'category',\n        axisLabel: { formatter: (val) => `${(val / 1e6).toFixed(2)} MHz` }\n    },\n    yAxis: { type: 'value', max: 100, min: 0 },\n    dataZoom: [{\n        type: 'inside',\n        start: 0,\n        end: 100\n    }, {\n        type: 'slider'\n    }],\n    series: [{\n        large: true,\n        type: 'scatterGL',\n        legendHoverLink: false\n    }]\n}\n\nconst ChartA = props => {\n    const { data } = props\n    const chartDom = useRef(null)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        if (data) {\n            // console.time()\n            handleSetOption(data)\n        }\n    }, [data])\n\n    const handleSetOption = (data) => {\n        const ec = chartDom.current.getEchartsInstance()\n        console.log(data);\n        const [X, Y] = handleXData(data)\n        setCount(count + 1)\n        \n        ec.setOption({\n            xAxis: {\n                data: X\n            },\n            series: [{ data: Y }]\n        }, [], true)\n    }\n\n    const renderReactChartOnce = useMemo(() => {\n        return (\n            // <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n            //     <circle cx={x} cy=\"50\" r=\"20\" stroke=\"black\"\n            //         stroke-width=\"2\" fill=\"red\"/>\n            // </svg>\n            <ReactECharts\n                ref={chartDom}\n                option={OPTION}\n                lazyUpdate\n                // onEvents={{\n                //     'rendered': () => console.timeEnd(),\n                //     'finished': () => console.timeEnd(),\n                // }}\n            />\n        )\n    }, [])\n    \n\n    return (\n        <div>\n            <div>{count}</div>\n            {renderReactChartOnce}\n            {/* <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                {data && data.map((item,index) => (\n                    <circle key={index} cx={index} cy={item} r=\"1\" fill=\"red\"/>\n                ))}\n            </svg> */}\n        </div>\n    )\n}\n\nexport default ChartA","/Users/chase.wu/Documents/project/react-app/src/App.js",["34"],"/Users/chase.wu/Documents/project/react-app/src/pages/ChartC.js",["35","36","37"],"import React, { useState, useEffect, useMemo, useRef } from 'react'\nimport ReactECharts from 'echarts-for-react'\n\nimport { handleXData } from '../utils'\n\nconst OPTION = {\n    title: { text: '1000个点折线图', right: 0 },\n    grid: {\n        top: 8, right: 8, bottom: 80, left: 36\n    },\n    animation: false,\n    xAxis: {\n        type: 'category',\n        axisLabel: { formatter: (val) => `${(val / 1e6).toFixed(2)} MHz` }\n    },\n    yAxis: { type: 'value' },\n    dataZoom: [{\n        type: 'inside',\n        start: 0,\n        end: 100\n    }, {\n        type: 'slider'\n    }],\n    series: [{\n        large: true,\n        type: 'line',\n        legendHoverLink: false\n    }]\n}\n\nconst ChartC = props => {\n    const { data } = props\n    const chartDom = useRef(null)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        if (data) {\n            console.time()\n            handleSetOption(data)\n        }\n    }, [data])\n\n    const handleSetOption = (data) => {\n        const ec = chartDom.current.getEchartsInstance()\n        const [X, Y] = handleXData(data, 1000)\n        console.log(X)\n        setCount(count + 1)\n        // ec.setOption({\n        //     xAxis: {\n        //         data: X\n        //     },\n        //     series: [{ data: Y }]\n        // }, [], true)\n    }\n\n    const renderReactChartOnce = useMemo(() => {\n        return (\n            <ReactECharts\n                ref={chartDom}\n                option={OPTION}\n                lazyUpdate\n                onEvents={{\n                    'rendered': () => console.timeEnd(),\n                    'finished': () => console.timeEnd(),\n                }}\n            />\n        )\n    }, [])\n    \n\n    return (\n        <div>\n            <div>{count}</div>\n            {renderReactChartOnce}\n        </div>\n    )\n}\n\nexport default ChartC","/Users/chase.wu/Documents/project/react-app/src/pages/ChartB.js",[],{"ruleId":"38","severity":1,"message":"39","line":6,"column":11,"nodeType":"40","messageId":"41","endLine":6,"endColumn":14},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":41,"column":8,"nodeType":"48","endLine":41,"endColumn":14,"suggestions":"49"},{"ruleId":"38","severity":1,"message":"50","line":6,"column":10,"nodeType":"40","messageId":"41","endLine":6,"endColumn":21},{"ruleId":"46","severity":1,"message":"47","line":41,"column":8,"nodeType":"48","endLine":41,"endColumn":14,"suggestions":"51"},{"ruleId":"38","severity":1,"message":"52","line":44,"column":15,"nodeType":"40","messageId":"41","endLine":44,"endColumn":17},{"ruleId":"38","severity":1,"message":"53","line":45,"column":19,"nodeType":"40","messageId":"41","endLine":45,"endColumn":20},"no-unused-vars","'END' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSetOption'. Either include it or remove the dependency array.","ArrayExpression",["56"],"'handleXData' is defined but never used.",["57"],"'ec' is assigned a value but never used.","'Y' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"58","fix":"60"},"Update the dependencies array to be: [data, handleSetOption]",{"range":"61","text":"62"},{"range":"63","text":"62"},[944,950],"[data, handleSetOption]",[919,925]]